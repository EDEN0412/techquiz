---
description: 
globs: 
alwaysApply: true
---
# Techquiz: Implementation Plan

## フロントエンド開発
### 1. プロジェクト設定
- [x] プロジェクトの初期設定（React/TypeScript/Vite）
  Done
  React/TypeScript/Viteプロジェクトの初期設定を完了。基本的なアプリケーション構造を整備しました。
- [x] Tailwind CSSの設定
  Done
  Tailwind CSSをインストールし、設定ファイルを整備。スタイリングの基盤を構築しました。
- [x] ディレクトリ構造の整理
  Done
  components、pages、libディレクトリを作成し、適切なファイル構成を整備しました。
- [x] 基本的なルーティングの設定
  Done
  React Routerを使用して基本的なページ遷移の設定を完了。カテゴリー画面からクイズ難易度選択画面への遷移を実装しました。
- [x] 環境変数の設定
  Done
  .env.exampleファイルを作成し、Supabase接続用の環境変数を定義しました。
- [x] Docker環境の構築 
  Done
  Dockerfile、docker-compose.yml、.dockerignoreを作成し、Docker開発環境を整備しました。
- [x] Docker CI/CDワークフローの設定
  Done
  GitHub Actionsを使用したDockerビルド・テスト用のワークフローを設定しました。

## バックエンド開発

### 2. データモデルとデータベース設計
- [x] データモデル設計（ユーザー、クイズ、結果、カテゴリ、難易度など）
  Done
  ERダイアグラムを作成し、主要なエンティティとその関係を定義。
- [x] ユーザーモデルの拡張と認証設定
  Done
  ユーザーモデルに認証機能を追加し、必要な属性を設定。
- [x] クイズモデルの作成
  Done
  カテゴリやレベルと関連付けたクイズモデルを作成。
- [x] 結果モデルの作成
  Done
  ユーザーのクイズ結果を保存するためのモデルを作成。
- [x] カテゴリモデルの作成
  Done
  クイズのカテゴリを管理するモデルを作成。
- [x] 難易度モデルの作成
  Done
  クイズの難易度を管理するモデルを作成。
- [x] ユーザー統計情報モデルの設計（完了クイズ数、平均スコアなど）
  Done
  ユーザーの学習進捗を追跡するための統計情報モデルを作成。
- [x] クイズ結果と統計情報の更新ロジックの設計
  Done
  クイズ完了時に統計情報を自動的に更新するためのロジックを設計。
- [x] 最近の活動履歴モデルの設計（カテゴリー、スコア、日付、難易度）
  Done
  ユーザーの最近の学習活動を記録するモデルを作成。
- [x] 活動履歴の保持期間ポリシーの設計（データライフサイクル管理）
  Done
  データの増加に対応するため、古い活動履歴の自動アーカイブや削除のポリシーを設計。


### 3. Supabaseデータベース設定
- [x] Supabaseプロジェクト設定
  Done
  Supabaseプロジェクトを作成し、必要な設定を完了。プロジェクトURLとAPIキーを取得しました。
- [x] PostgreSQLデータベース接続設定
  Done
  Supabaseが提供するPostgreSQLデータベースへの接続設定を完了。接続テストも成功しました。
- [x] Djangoとの接続設定
  Done
  Djangoとの連携を設定し、Supabaseクライアントを初期化する機能を実装。SupabaseModelMixinを作成し、Supabaseテーブルを操作するための機能を追加しました。
- [ ] データベースマイグレーション設定
  - [x] ローカルSupabase開発環境のセットアップ
  Done
  Supabase CLIを使用してローカル開発環境をセットアップしました。環境変数を適切に設定し、初期セットアップスクリプトを作成、Supabase Studioが正常に動作することを確認しました。
    - [x] docker-compose.ymlの作成（Supabase Local用）
    Done
    docker-compose.ymlの作成から始め、最終的にSupabase CLIを使用した方法に移行。環境変数を適切に設定し、Supabase Studioが正常に動作することを確認しました。
    - [x] 初期セットアップスクリプト（setup.sql）の作成
    Done
    ERダイアグラムに基づいてテーブル構造、関連付け、RLSポリシー、自動更新トリガー、サンプルデータを含むSQLスクリプトを作成。PG関数を使って統計情報の自動更新と古いデータのアーカイブ機能も実装しました。
    - [x] 開発環境用.env.developmentファイルの作成
    Done
    開発環境で必要な環境変数を含む.env.developmentファイルを作成。Django、Supabase接続情報、データベース接続情報などを設定し、.gitignoreにも追加しました。また、Djangoの設定ファイルが.env.developmentを読み込むように修正しました。
  - [x] settings.pyの修正（開発環境でもPostgreSQLを使用）
    Done
    開発環境と本番環境の両方でPostgreSQLを使用するように設定を変更。データベース接続情報の環境変数参照順序を整理し、ローカルSupabaseに適したデフォルト値を設定しました。SQLiteに戻す場合のオプションも用意しました。
  - [ ] マイグレーション後のフック機能の実装（Djangoマイグレーション後にSupabaseテーブルを更新）
  - [ ] 開発サーバー起動スクリプト（dev.sh）の作成
- [ ] Supabase CLI導入と設定
  - [x] Supabase CLIのインストール
    Done
    Supabase CLIをインストールし、supabase initコマンドでプロジェクトを初期化しました。
  - [ ] supabase/config.tomlの設定
  - [ ] DBマイグレーションの管理手順の整備
  - [ ] ローカル環境と本番環境の連携方法の確立
- [ ] 既存モデルのSupabase対応
  - [ ] モデルクラスへのSupabaseModelMixinの適用
  - [ ] supabase_tableプロパティの設定
  - [ ] pre_save/post_saveシグナルでのSupabase同期実装
- [ ] テスト環境のSupabase設定
  - [ ] テスト用.env.testファイルの作成
  - [ ] テスト実行時のデータベース設定
  - [ ] pytest.iniの設定
- [ ] CI/CD設定のSupabase対応
  - [ ] GitHub ActionsでのSupabaseマイグレーション実行
  - [ ] デプロイ時のSupabaseスキーマ更新自動化
  - [ ] 本番/ステージング環境のSupabase設定分離
- [x] Row Level Securityの設定
  Done
  Supabase管理画面からテーブルごとにRLSを設定。認証プロバイダー設定（メールアドレス認証、GitHub連携、Google連携）を実装しました。

### 4. Django API開発
- [x] Djangoプロジェクト初期設定
  Done
  Djangoプロジェクトの基本設定を完了し、ディレクトリ構造を整備しました。
- [ ] Django REST Frameworkの設定
- [ ] APIエンドポイントの実装
- [ ] シリアライザーの作成
- [ ] 認証・認可の実装（JWT）

## フロントエンド開発（続き）

### 5. Django API連携と認証機能
-  [x] Django API Clientの設定と初期化
  Done
  Axiosを使用したAPIクライアントを実装し、認証・クイズ・ユーザー関連の各APIサービスを作成しました。
- [ ] Django認証フローの実装（JWT）
- [ ] サインアップ機能の実装
- [ ] ログイン機能の実装
- [ ] パスワードリセット機能の実装
- [ ] 認証状態の管理（Context/Zustand）
- [ ] ユーザー統計情報の取得APIの実装
- [ ] 最近の活動履歴取得APIの実装
- [ ] ダッシュボード統計表示機能の実装
- [ ] クイズ完了時の統計情報即時更新APIの実装
- [ ] 統計情報バッチ更新処理の実装

### 6. ホーム画面
- [ ] レイアウトの作成
- [ ] カテゴリ表示コンポーネントの実装
- [ ] 難易度選択UIの実装
- [ ] ユーザーダッシュボードへのリンク
- [ ] アプリ概要セクションの実装

### 7. クイズ機能
- [ ] クイズデータモデルの設計（Djangoモデルに合わせる）
- [ ] クイズ問題表示コンポーネントの実装
- [ ] 選択肢表示コンポーネントの実装
- [ ] 回答送信と結果表示機能の実装
- [ ] ヒント表示機能の実装
- [ ] 進捗バーの実装
- [ ] 複数の問題形式への対応（選択式、穴埋め等）
- [ ] 即時フィードバック機能の実装

### 8. 結果画面
- [ ] スコア表示コンポーネントの実装
- [ ] 正誤一覧表示の実装
- [ ] 結果の保存機能の実装（Django APIを使用）

### 9. ユーザーダッシュボード
- [ ] 学習履歴と成績表示機能の実装
- [ ] フィルタリング機能の実装
- [ ] 完了クイズ数と平均スコアの表示コンポーネント実装
- [ ] 最近の活動リスト表示コンポーネントの実装
- [ ] 活動履歴の「復習する」機能の実装
- [ ] 統計情報の自動更新機能の実装
- [ ] 古いデータの自動アーカイブ機能の実装

## テストとデプロイ

### 10. テスト
- [ ] Django単体テストの実装
- [ ] API統合テストの実装
- [ ] ユーザーフロー検証テストの実装

### 11. デプロイ
- [ ] CI/CD設定（GitHub Actions）
  - [ ] フロントエンドビルド・テスト自動化
  - [ ] バックエンドテスト自動化
  - [ ] 自動デプロイフローの構築
  - [ ] デプロイ前の自動テスト実行設定
- [ ] 環境変数の設定
- [ ] AWS本番環境設定
  - [ ] S3バケットの設定
  - [ ] CloudFrontディストリビューションの設定
  - [ ] デプロイスクリプトの作成
- [ ] Supabase本番環境設定
- [ ] デプロイ後の動作確認

### 12. ドキュメント作成
- [ ] README.mdの作成・更新

### 13. セキュリティ対策
- [ ] CSRFトークンの設定と検証
- [ ] XSS対策の実装
- [ ] レート制限の設定
- [ ] セキュリティヘッダーの設定
- [ ] 脆弱性スキャンの実施