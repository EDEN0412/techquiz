---
description: 
globs: 
alwaysApply: true
---
# Techquiz: Implementation Plan

## フロントエンド開発
### 1. プロジェクト設定
- [x] プロジェクトの初期設定（React/TypeScript/Vite）
  Done
  React/TypeScript/Viteプロジェクトの初期設定を完了。基本的なアプリケーション構造を整備しました。
- [x] Tailwind CSSの設定
  Done
  Tailwind CSSをインストールし、設定ファイルを整備。スタイリングの基盤を構築しました。
- [x] ディレクトリ構造の整理
  Done
  components、pages、libディレクトリを作成し、適切なファイル構成を整備しました。
- [x] 基本的なルーティングの設定
  Done
  React Routerを使用して基本的なページ遷移の設定を完了。カテゴリー画面からクイズ難易度選択画面への遷移を実装しました。
- [x] 環境変数の設定
  Done
  .env.exampleファイルを作成し、Supabase接続用の環境変数を定義しました。
- [x] Docker環境の構築 
  Done
  Dockerfile、docker-compose.yml、.dockerignoreを作成し、Docker開発環境を整備しました。
- [x] Docker CI/CDワークフローの設定
  Done
  GitHub Actionsを使用したDockerビルド・テスト用のワークフローを設定しました。

## バックエンド開発

### 2. データモデルとデータベース設計
- [x] データモデル設計（ユーザー、クイズ、結果、カテゴリ、難易度など）
  Done
  ERダイアグラムを作成し、主要なエンティティとその関係を定義。
- [x] ユーザーモデルの拡張と認証設定
  Done
  ユーザー認証機能はDjango標準のUserモデルを利用。不要となったUserProfileモデルは削除し、関連コードも修正しました。
- [x] クイズモデルの作成
  Done
  カテゴリやレベルと関連付けたクイズモデルを作成。
- [x] 結果モデルの作成
  Done
  ユーザーのクイズ結果を保存するためのモデルを作成。
- [x] カテゴリモデルの作成
  Done
  クイズのカテゴリを管理するモデルを作成。
- [x] 難易度モデルの作成
  Done
  クイズの難易度を管理するモデルを作成。
- [x] ユーザー統計情報モデルの設計（完了クイズ数、平均スコアなど）
  Done
  ユーザーの学習進捗を追跡するための統計情報モデルを作成。
- [x] クイズ結果と統計情報の更新ロジックの設計
  Done
  クイズ完了時に統計情報を自動的に更新するためのロジックを設計。
- [x] 最近の活動履歴モデルの設計（カテゴリー、スコア、日付、難易度）
  Done
  ユーザーの最近の学習活動を記録するモデルを作成。
- [x] 活動履歴の保持期間ポリシーの設計（データライフサイクル管理）
  Done
  データの増加に対応するため、古い活動履歴の自動アーカイブや削除のポリシーを設計。

### 3. Supabaseデータベース設定
- [x] Supabaseプロジェクト設定
  Done
  Supabaseプロジェクトを作成し、必要な設定を完了。プロジェクトURLとAPIキーを取得しました。
- [x] PostgreSQLデータベース接続設定
  Done
  Supabaseが提供するPostgreSQLデータベースへの接続設定を完了。接続テストも成功しました。
- [x] Djangoとの接続設定
  Done
  Djangoとの連携を設定し、Supabaseクライアントを初期化する機能を実装。SupabaseModelMixinを作成し、Supabaseテーブルを操作するための機能を追加しました。
- [x] データベースマイグレーション設定
  - [x] ローカルSupabase開発環境のセットアップ
  Done
  Supabase CLIを使用してローカル開発環境をセットアップしました。環境変数を適切に設定し、初期セットアップスクリプトを作成、Supabase Studioが正常に動作することを確認しました。
    - [x] docker-compose.ymlの作成（Supabase Local用）
    Done
    docker-compose.ymlの作成から始め、最終的にSupabase CLIを使用した方法に移行。環境変数を適切に設定し、Supabase Studioが正常に動作することを確認しました。
    - [x] 初期セットアップスクリプト（setup.sql）の作成
    Done
    ERダイアグラムに基づいてテーブル構造、関連付け、RLSポリシー、自動更新トリガー、サンプルデータを含むSQLスクリプトを作成。PG関数を使って統計情報の自動更新と古いデータのアーカイブ機能も実装しました。
    - [x] 開発環境用.env.developmentファイルの作成
    Done
    開発環境で必要な環境変数を含む.env.developmentファイルを作成。Django、Supabase接続情報、データベース接続情報などを設定し、.gitignoreにも追加しました。また、Djangoの設定ファイルが.env.developmentを読み込むように修正しました。
  - [x] settings.pyの修正（開発環境でもPostgreSQLを使用）
  Done
  開発環境と本番環境の両方でPostgreSQLを使用するように設定を変更。データベース接続情報の環境変数参照順序を整理し、ローカルSupabaseに適したデフォルト値を設定しました。SQLiteに戻す場合のオプションも用意しました。
  - [x] マイグレーション後のフック機能の実装（Djangoマイグレーション後にSupabaseテーブルを更新）
  Done
  Djangoのpost_migrateシグナルを利用した自動同期機能を実装。SupabaseModelMixinを拡張し、Django-Supabase間のデータ同期機能と整合性チェック機能を追加しました。また、手動同期用コマンドsync_supabaseを拡張し、詳細なログ出力、整合性チェック、不整合の自動修正、詳細レポート生成などの機能を追加しました。
    - [x] Supabase同期用ユーティリティモジュールの作成
    Done
    DjangoモデルとSupabaseテーブルを同期するためのユーティリティモジュールを作成。モデル情報の解析、テーブル作成/変更、データ移行、マイグレーション後の自動同期機能を実装しました。また、SUPABASE_AUTO_SYNC設定を追加し、Djangoのsignalsを使用して自動同期の仕組みを構築しました。
    - [x] マイグレーション後のシグナルハンドラ実装
    Done
    Djangoのpost_migrateシグナルを受け取り、SupabaseModelMixinを継承したモデルをSupabaseと同期するハンドラを実装しました。アプリケーション別の同期機能、詳細なエラーハンドリング、ロギング機能を追加し、同期の信頼性を向上させました。テストモデル（Category、DifficultyLevel）も実装し、同期機能を検証しました。
    - [x] 手動同期用のmanage.pyコマンド実装
    Done
    Djangoの管理コマンドとして手動同期機能を実装しました。アプリケーションまたはモデル単位での同期、確認プロンプト、詳細ログ出力などのオプションを追加し、開発者が柔軟に同期を実行できるようにしました。コマンド実行時は同期対象のモデル一覧を表示し、結果も分かりやすく表示します。
  - [x] 開発サーバー起動スクリプト（dev.sh）の作成
  Done
  フロントエンド（Vite）、バックエンド（Django）、Supabaseを一つのスクリプトで起動できるdev.shを作成。Dockerモードとローカルモードの両方をサポートし、適切な終了処理と環境チェック機能を実装しました。
  - [x] Supabase同期機能の修正・強化
    - [x] 情報スキーマへのアクセス方法の修正
    Done
    PostgreSQLの情報スキーマにアクセスするためのRPC関数（check_table_exists、select_columns、execute_sql）を実装。Supabase同期機能を修正し、正常に動作することを確認しました。
    - [x] テーブル存在確認ロジックの代替アプローチ実装
    Done
    テーブル存在確認ロジックを強化するために複数のフォールバックメカニズムを実装。RPC、SELECTクエリ、pg_tablesへの問い合わせという3つの方法を順番に試し、より堅牢な確認方法を実現しました。また、ユニットテストを作成し、各確認方法の動作を検証しました。
    - [x] エラーハンドリングの改善
    Done
    Supabase同期機能のエラーハンドリングを強化。カスタム例外クラス、詳細なログ記録、リトライ機能を追加し、エラーの原因特定とシステムの安定性を向上させました。
    - [x] テーブル作成・更新処理の安定化
    Done
    check_table_exists_with_fallbackをREST APIとpg_catalog優先に変更しました
    alter_supabase_tableでカラム情報取得時にpg_catalogフォールバック処理を追加しました
  - [x] Supabase同期テストの実装
    - [x] テスト用モデルを使った同期機能の単体テスト
    Done
    SupabaseModelMixinの同期機能をテストするユニットテストを実装。モデルの作成・更新・削除操作および一貫性検証機能のテストケースを作成しました。
    - [x] エラー条件下での動作テスト
    Done
    接続エラー発生時のリトライ機能および最大試行回数到達時のエラーハンドリングをテスト。全16テストが正常に完了し、エラー時の適切な処理が確認できました。
    - [x] 様々なモデル構造での同期テスト
    Done
    ForeignKey, ManyToManyField, OneToOneField, 継承モデルなど、ForeignKey, ManyToMan様々な関連を持つテストモデルを定義し、これらのモデルに対する同期処理（呼び出し）をテストするケースを追加しました。テスト実行時のエラー（ImportError, TypeError, AttributeError, InvalidBasesError, NameError, 設定のモック適用問題）を段階的に修正し、最終的に全テストがパスすることを確認しました。
    - [x] テストモデル名の衝突解消と全テスト実行の有効化
    Done
    複数のテストファイルに存在する同名のテストモデル（TestModel）の名前とapp_labelを変更し、衝突を解消しました。これにより、`backend` ディレクトリで `pytest` コマンドを実行するだけで全テスト（32個）が正常に実行できるようになりました。

- [x] Supabase CLI導入と設定
  Done
  Supabase CLIのインストール、設定ファイルの構成、およびDBマイグレーション管理手順の整備が完了しました。これにより、ローカルでのSupabase開発環境が整いました。
  - [x] Supabase CLIのインストール
    Done
    Supabase CLIをインストールし、supabase initコマンドでプロジェクトを初期化しました。
  - [x] supabase/config.tomlの設定
    Done
    ローカル開発・運用に必要な全主要サービス（API, DB, 認証, ストレージ等）の設定を完了。Django→Supabase同期運用に合わせた構成としました。
  - [x] DBマイグレーションの管理手順の整備
    Done
    DjangoモデルとSupabaseの同期管理手順書を作成し、ベストプラクティスをドキュメント化。開発者向けに例や複雑なスキーマ変更の手順、環境別の考慮事項も整理しました。
- [x] 既存モデルのSupabase対応
  Done
  既存の全モデルクラスに `SupabaseModelMixin` を適用し、`supabase_table` プロパティを設定。pre_save/post_saveシグナルによる自動同期機能も実装しました。
  - [x] モデルクラスへのSupabaseModelMixinの適用
    Done
    ER図に基づいて実装した全てのモデルクラスに `SupabaseModelMixin` を継承させ、Supabase連携の準備を行いました。
  - [x] supabase_tableプロパティの設定
    Done
    各モデルクラスに、対応するSupabase上のテーブル名を指定する `supabase_table` プロパティを設定しました。
  - [x] pre_save/post_saveシグナルでのSupabase同期実装
    Done
    pre_saveシグナルとpost_saveシグナルを実装し、モデルの保存時にSupabaseとの同期が自動的に行われる仕組みを実装しました。また、モデルのsaveメソッドを拡張して統計情報などの関連データも適切に更新されるようにしました。
- [x] テスト用.env.testファイルの作成
  Done
  テスト環境用の `.env.test` ファイルを作成しました。また、テスト実行時にこの設定が読み込まれるように、`pytest.ini` の作成とDjangoの `settings.py` の環境別（base, development, test, production）への分割を行いました。テスト用依存関係ファイル `requirements-test.txt` も作成しました。
- [x] テスト実行時のデータベース設定
  Done
  テスト環境設定の一環として `backend/techskillsquiz/settings/test.py` 内でテスト用データベース設定を行い、`.env.test` から読み込むようにしました。
- [x] pytest.iniの設定
  Done
  テストランナー `pytest` の設定ファイル `pytest.ini` を作成し、テスト対象パス、Django設定モジュール、`.env.test` の読み込み、カバレッジ設定などを定義しました。

- [x] CI/CD設定のSupabase対応
  - [x] GitHub ActionsでのSupabaseマイグレーション実行
    Done
    GitHub ActionsワークフローファイルとSupabaseマイグレーション自動化を実装。本番環境とステージング環境用のワークフローを作成し、環境ごとにデプロイできる仕組みを整備しました。
  - [x] デプロイ時のSupabaseスキーマ更新自動化
    Done
    GitHub Actionsワークフローが、指定ブランチへのプッシュをトリガーに`supabase db push`を実行することで、デプロイと連動したスキーマ更新を自動化しました。
  - [x] 本番/ステージング環境のSupabase設定分離
    Done
    GitHub SecretsとEnvironmentsを活用し、本番環境とステージング環境で使用するSupabaseプロジェクトIDやDBパスワードなどの機密情報を安全に分離・管理する仕組みを構築しました。
- [x] Row Level Securityの設定
  Done
  Supabase管理画面からテーブルごとにRLSを設定。認証プロバイダー設定（メールアドレス認証、GitHub連携、Google連携）を実装しました。

### 4. Django API開発
- [x] Djangoプロジェクト初期設定
  Done
  Djangoプロジェクトの基本設定を完了し、ディレクトリ構造を整備しました。
- [x] Django REST Frameworkの設定
  Done
  djangorestframework-simplejwtパッケージを追加し、JWT認証用のエンドポイントとSwagger/Redocドキュメント設定を実装。DRFの詳細設定も追加しました。
- [x] シリアライザーの作成
  Done
  全モデル（Category, DifficultyLevel, Quiz, Question, Answer, QuizResult, UserStatistics, ActivityHistory）に対応するシリアライザーを実装。関連フィールドの表示や読み取り専用設定を適切に設定し、ネストしたデータ構造にも対応しました。
- [x] ビューの実装
  Done
  Django REST Frameworkを使用して8つのViewSetを実装。各モデルのCRUD操作と検索/フィルタリング/ソート機能を実装し、特殊なエンドポイントも追加しました。
- [x] URLパターンの設定
  Done
  REST Frameworkのルーターを使ってViewSetとURLパターンを接続。APIエンドポイントの命名規則を整えてパス定義を完了しました。
- [x] APIエンドポイントの実装
  Done
  カテゴリーと難易度でクイズをフィルタリングする機能や、最近の活動履歴、ユーザー統計情報を取得するカスタムエンドポイントを実装。フロントエンドとの連携用にAPIクライアントも更新しました。
- [x] 認証・認可の実装（JWT）
  Done
  DjangoバックエンドにJWT認証・認可機能を追加。Userモデル、関連シリアライザー、認証ビュー、URLルーティングを実装しました。フロントエンド側でも認証サービス、AuthContext、APIクライアントのトークン連携を実装しました。 `SIMPLE_JWT` 設定で `BLACKLIST_AFTER_ROTATION=True` を有効化済み。
- [x] 認証・認可機能のテスト実装
  Done
  Userモデル、および全ての認証・認可関連APIエンドポイント（ユーザー登録、ログイン/トークン取得、トークンリフレッシュ、トークン検証、ログアウト/トークン無効化、パスワード変更）に対する詳細なテストを実装しました。トークンブラックリスト機能も追加し、CI/CDの`auth_user`テーブル関連エラーをマイグレーション順序の制御で解決しました。さらに、CI/CDワークフローを修正し、`users` アプリケーションのテストが確実に実行され、カバレッジレポートに含まれるようにしました。
  - [x] ユーザー登録APIのテスト
  - [x] ログインAPI（トークン取得）のテスト
  - [x] ログアウトAPI（リフレッシュトークン無効化）の実装とテスト
  - [x] トークンリフレッシュ・検証APIのテスト
  - [x] 保護されたAPIへのアクセステスト（認証・認可）
  - [x] パスワード変更APIのテスト

## フロントエンド開発（続き）

### 5. Django API連携と認証機能
-  [x] Django API Clientの設定と初期化
  Done
  Axiosを使用したAPIクライアントを実装し、認証・クイズ・ユーザー関連の各APIサービスを作成しました。
- [x] Django認証フローの実装（JWT）
  Done
  フロントエンドに認証サービス(authService.ts)と認証状態を管理するAuthContext(AuthContext.tsx)を実装。APIクライアント(client.ts)もトークンリフレッシュ機能を含むように更新し、App.tsxでAuthProviderを適用しました。
- [x] サインアップ機能の実装
  Done
  サインアップフォームを作成し、フロントエンドからDjango APIを呼び出してユーザー登録ができるようにしました。APIクライアントのURL設定やDjangoサーバーの起動に関する問題を解決し、正常に動作することを確認しました。
- [x] ログイン機能の実装
  Done
  ログインフォームコンポーネントを作成し、認証サービスとAuthContextを統合。エラー処理や状態管理も実装し、正しい認証情報でのログインとリダイレクト機能を追加しました。
- [ ] パスワードリセット機能の実装 (主要機能開発後に実装) 
- [ ] 認証状態のグローバルな管理と更新（`AuthContext` の活用）(主要機能開発後に実装) 
- [x] ユーザー統計情報の取得APIの実装
  Done
  バックエンドでUserStatisticsViewSetの期間フィルタリング、ソート機能、最新進捗情報を含むsummaryエンドポイントを強化。フロントエンドでUserStatistics、UserStatsSummary型定義を追加し、型安全なAPIクライアントサービスを実装しました。
- [x] 最近の活動履歴取得APIの実装
  Done
  ActivityHistoryViewSetのrecentアクションを活用し、useRecentActivitiesフックを実装。ダッシュボードの最近の活動セクションを実際のAPIから取得したデータで表示するように更新し、ローディング・エラー・空状態の適切なハンドリングも実装しました。
- [x] ダッシュボード統計表示機能の実装
  Done
  useUserStatsとuseRecentActivitiesフックを作成し、ダッシュボード画面のデザインを保持しながら、実際のAPIから取得した統計データ（完了クイズ数、平均スコア）と最近の活動履歴を表示する機能を実装しました。
- [ ] クイズ完了時の統計情報即時更新APIの実装
- [ ] 統計情報バッチ更新処理の実装

### 6. ホーム画面
- [ ] レイアウトの作成
- [ ] カテゴリ表示コンポーネントの実装
- [ ] 難易度選択UIの実装
- [ ] ユーザーダッシュボードへのリンク
- [ ] アプリ概要セクションの実装

### 7. クイズ機能
- [x] クイズデータモデルの設計（Djangoモデルに合わせる）
  Done
  フロントエンドの `src/lib/api/types.ts` に、Djangoモデルに対応するクイズ関連の型定義（Quiz, QuizQuestion, Answerなど）が既に存在することを確認しました。
- [x] クイズ問題表示コンポーネントの実装
  Done
  QuizQuestionコンポーネントとQuizQuestionDemoコンポーネントを実装。選択肢表示、回答ボタン確定フロー、真偽判定フィードバック、進捗バー、前後ナビゲーション、状態保持機能を含む完全なクイズ体験を提供。/quiz/demoルートでHTML/CSS/JavaScriptの基礎クイズがアクセス可能です。
- [x] 選択肢表示コンポーネントの実装
  Done
  QuizQuestionコンポーネント内で選択肢表示機能を実装。A、B、C、Dラベル付き、ホバー効果、選択状態表示、回答確定後の正誤表示を含む視覚的に分かりやすいUI設計を完了しました。
- [x] 回答送信と結果表示機能の実装
  Done
  選択肢クリック→「📝 回答する」ボタン→フィードバック表示の2段階確定フローを実装。正解・不正解の視覚的フィードバック、ランダムメッセージ表示、解説表示機能を完了しました。
- [ ] ヒント表示機能の実装（主要機能開発後に実装）
- [x] 進捗バーの実装
  Done
  回答済み問題数に基づく正確な進捗表示機能を実装。視覚的に分かりやすいアニメーション付き進捗バー、パーセンテージ表示、問題番号表示を含む完全な進捗管理システムを完了しました。
- [ ] 複数の問題形式への対応（選択式、穴埋め等）
- [x] 即時フィードバック機能の実装
  Done
  回答確定後に即座に正誤判定、カラーコード表示（緑=正解、赤=不正解）、ランダムフィードバックメッセージ、正解表示、詳細解説表示を含む充実したフィードバックシステムを完了しました。

### 8. 結果画面
- [ ] スコア表示コンポーネントの実装
- [ ] 正誤一覧表示の実装
- [ ] 結果の保存機能の実装（Django APIを使用）

### 9. ユーザーダッシュボード
- [ ] 学習履歴と成績表示機能の実装
- [ ] フィルタリング機能の実装
- [ ] 完了クイズ数と平均スコアの表示コンポーネント実装
- [ ] 最近の活動リスト表示コンポーネントの実装
- [ ] 活動履歴の「復習する」機能の実装
- [ ] 統計情報の自動更新機能の実装
- [ ] 古いデータの自動アーカイブ機能の実装

## テストとデプロイ

### 10. テスト
- [x] シリアライザーのテスト実装
  Done
  全シリアライザー（Category, DifficultyLevel, Quiz, Question, Answer, QuizResult, UserStatistics, ActivityHistory）に対するユニットテストを実装。シリアライズ/デシリアライズの検証、フィールドの検証、エラー処理などを網羅的にテストし、全31テストが正常に実行されることを確認しました。
- [x] APIビューのテスト実装
  Done
  全8種類のViewSet（Category, DifficultyLevel, Quiz, Question, Answer, QuizResult, UserStatistics, ActivityHistory）に対する機能テストを実装。認証、CRUD操作、フィルタリング、検索、並び替え、アクション実行などを検証し、全46テストが正常に実行されることを確認しました。
- [x] フロントエンドとの結合テスト実装
  Done
  バックエンドとフロントエンドの結合テストを2種類実装しました。1つ目はバックエンドから見た統合テスト（FrontendBackendIntegrationTest）で、フロントエンドのAPIクライアントと同等の操作でバックエンドAPIをテスト。2つ目はモックを使用したAPIクライアントテスト（ApiClientMockTest）で、フロントエンドコードの振る舞いをテストします。合計19のテストケースですべてのAPIエンドポイントと主要なデータフローをカバーしています。
- [ ] Django単体テストの実装
- [ ] API統合テストの実装
- [ ] ユーザーフロー検証テストの実装

### 11. デプロイ
- [ ] CI/CD設定（GitHub Actions）
  - [ ] フロントエンドビルド・テスト自動化
  - [ ] バックエンドテスト自動化
    - [x] CI/CD:シリアライザーテストの自動実行設定
      Done
      GitHub Actionsワークフローにバックエンドのシリアライザーテストを実行するジョブを追加。マイグレーション前にテストを実行し、テストが成功した場合のみマイグレーションを実行する仕組みを構築しました。
    - [x] CI/CD:フロントエンドとバックエンドの結合テストの自動実行設定
      Done
      GitHub Actionsワークフローに統合テストジョブを追加。バックエンド結合テスト（test_integration.py、test_api_client_mock.py）とフロントエンド結合テスト（QuizApiIntegration.test.tsx）を実行する設定を実装しました。テスト成功後のみマイグレーションが実行される依存関係も設定しました。
    - [ ] （今後追加されるビューのテスト自動化など）
  - [ ] 自動デプロイフローの構築
  - [ ] デプロイ前の自動テスト実行設定
- [ ] 環境変数の設定
- [ ] AWS本番環境設定
  - [ ] S3バケットの設定
  - [ ] CloudFrontディストリビューションの設定
  - [ ] デプロイスクリプトの作成
- [ ] Supabase本番環境設定
- [ ] デプロイ後の動作確認

### 12. ドキュメント作成
- [ ] README.mdの作成・更新

### 13. セキュリティ対策
- [ ] CSRFトークンの設定と検証
- [ ] XSS対策の実装
- [ ] レート制限の設定
- [ ] セキュリティヘッダーの設定
- [ ] 脆弱性スキャンの実施

### 14. Gitセキュリティ対策

#### Git Hooks設定
- [ ] pre-commitフックによる機密情報チェックの実装
- [ ] 禁止ファイルパターンの自動検出機能の追加
- [ ] .gitignoreファイル変更検出の仕組み実装

#### CI/CDセキュリティ強化
- [ ] GitHub Actionsでの機密情報スキャン設定
- [ ] プル/プッシュリクエスト時の自動セキュリティチェック


---

# コードレビューとフィードバック

- タスク管理の観点から、**完了した作業には必ず「Done」と2行の要約を記載**しましょう。
- これにより、進捗の可視化と履歴管理がしやすくなります。

---

# さらなる学習・練習

- 他のタスクも完了したら、同様に「Done」と要約を記載していきましょう。
- 実際の運用で設定を変更した場合も、必ずタスク管理ファイルを更新する習慣をつけると良いです。