name: Supabase Migration and Tests (Staging)

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: techskillsquiz.settings.test
      DATABASE_NAME: test_db
      DATABASE_USER: test_user
      DATABASE_PASSWORD: test_password
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      SUPABASE_URL: "http://localhost:54321"
      SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
          POSTGRES_USER: ${{ env.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd backend
          poetry config virtualenvs.create false
          poetry install --with dev
          # 確実にpytestとカバレッジプラグインをインストール
          pip install pytest pytest-cov pytest-django
      
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.DATABASE_USER }}; do
            echo "Waiting for PostgreSQL to start..."
            sleep 1
          done
          echo "PostgreSQL started."
      
      - name: Run tests
        run: |
          cd backend
          python manage.py test quiz.tests.test_serializers -v 2
      
      - name: Notify test success
        if: success()
        run: echo "シリアライザーのテストが正常に完了しました"
      
      - name: Notify test failure
        if: failure()
        run: echo "シリアライザーのテストに失敗しました"
  
  integration_tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: test
    env:
      DJANGO_SETTINGS_MODULE: techskillsquiz.settings.test
      DATABASE_NAME: test_db
      DATABASE_USER: test_user
      DATABASE_PASSWORD: test_password
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      SUPABASE_URL: "http://localhost:54321"
      SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
          POSTGRES_USER: ${{ env.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd backend
          poetry config virtualenvs.create false
          poetry install --with dev
          # 確実にpytestとカバレッジプラグインをインストール
          pip install pytest pytest-cov pytest-django
      
      - name: Install Node.js dependencies
        run: |
          # npm ci の代わりに npm install を使用して依存関係を更新
          npm install
          # カバレッジレポート生成に必要な依存関係を明示的にインストール
          npm install -D @vitest/coverage-v8
      
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.DATABASE_USER }}; do
            echo "Waiting for PostgreSQL to start..."
            sleep 1
          done
          echo "PostgreSQL started."
      
      - name: Run backend integration tests
        run: |
          cd backend
          python -m pytest quiz/tests/test_integration.py -v
          python -m pytest quiz/tests/test_api_client_mock.py -v
          python -m pytest users/ -v  # ユーザー認証関連のテストを追加
      
      - name: Run frontend integration tests
        run: |
          # テスト実行前にモックファイルディレクトリを作成
          mkdir -p src/test/mocks
          
          # API clientをモックするファイルを作成
          mkdir -p src/test/__mocks__
          echo "import { vi } from 'vitest';

          const api = {
            get: vi.fn(() => Promise.resolve({ data: {} })),
            post: vi.fn(() => Promise.resolve({ data: {} })),
            put: vi.fn(() => Promise.resolve({ data: {} })),
            delete: vi.fn(() => Promise.resolve({ data: {} })),
            patch: vi.fn(() => Promise.resolve({ data: {} }))
          };
          
          export default api;" > src/test/__mocks__/api.js
          
          # テスト実行
          npm test -- src/components/tests/QuizApiIntegration.test.tsx
      
      - name: Generate coverage reports
        run: |
          cd backend
          pytest quiz/tests/test_integration.py quiz/tests/test_api_client_mock.py --cov=quiz --cov-report=xml
          cd ..
          # 確認のためカバレッジレポート生成前に依存関係の確認
          echo "列挙された依存関係:"
          npm list @vitest/coverage-v8 || true
          
          # Vitestの正しいカバレッジ形式を使用
          npm test -- src/components/tests/QuizApiIntegration.test.tsx --coverage --coverage.reporter=lcov
      
      - name: Notify integration test success
        if: success()
        run: echo "フロントエンドとバックエンドの結合テストが正常に完了しました"
      
      - name: Notify integration test failure
        if: failure()
        run: echo "フロントエンドとバックエンドの結合テストに失敗しました"

  migrate:
    name: Supabase Migration (Staging)
    needs: [test, integration_tests]  # テストと統合テストが成功した場合のみこのジョブを実行
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dnsutils jq
      
      - name: Install Supabase CLI
        run: |
          LATEST_VERSION=$(curl -sL https://api.github.com/repos/supabase/cli/releases/latest | jq -r '.tag_name')
          DEB_URL="https://github.com/supabase/cli/releases/download/${LATEST_VERSION}/supabase_${LATEST_VERSION#v}_linux_amd64.deb"
          echo "Downloading Supabase CLI version ${LATEST_VERSION} from ${DEB_URL}"
          curl -L -o supabase.deb "$DEB_URL"
          sudo dpkg -i supabase.deb
          rm supabase.deb
      
      - name: Verify Supabase CLI Installation
        run: supabase --version
      
      - name: Login to Supabase
        run: supabase login
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Get Supabase DB IPv4 Address
        id: db_ip
        run: |
          DB_IP=$(dig +short A db.${{ secrets.SUPABASE_STAGING_PROJECT_ID }}.supabase.co)
          echo "IP=${DB_IP}" >> $GITHUB_OUTPUT
          echo "Found DB IP: ${DB_IP}"
      
      - name: Run database migrations
        env:
          PGHOST: ${{ steps.db_ip.outputs.IP }}
          PGPORT: 5432
          PGDATABASE: postgres
          PGUSER: postgres
          PGPASSWORD: ${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}
        run: |
          echo "Setting up supabase link..."
          supabase link --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_ID }}
          echo "Running supabase db push..."
          supabase db push -p ${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}
      
      - name: Check migration status
        run: |
          echo "Listing applied migrations..."
          supabase migration list -p ${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}
      
      - name: Notify on Success
        if: success()
        run: |
          echo "ステージング環境へのマイグレーションが正常に完了しました"
      
      - name: Notify on Failure
        if: failure()
        run: |
          echo "ステージング環境へのマイグレーションに失敗しました"