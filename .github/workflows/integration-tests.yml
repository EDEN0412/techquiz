name: Integration Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  backend_integration_tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: techskillsquiz.settings.test
      DATABASE_NAME: test_db
      DATABASE_USER: test_user
      DATABASE_PASSWORD: test_password
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      SUPABASE_URL: "http://localhost:54321"
      SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
          POSTGRES_USER: ${{ env.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd backend
          poetry config virtualenvs.create false
          poetry install --with dev
          # 確実にpytestとカバレッジプラグインをインストール
          pip install pytest pytest-cov pytest-django
      
      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.DATABASE_USER }}; do
            echo "Waiting for PostgreSQL to start..."
            sleep 1
          done
          echo "PostgreSQL started."
      
      - name: Run backend integration tests
        run: |
          cd backend
          python -m pytest quiz/tests/test_integration.py -v
          python -m pytest quiz/tests/test_api_client_mock.py -v
      
      - name: Generate Backend Coverage Report
        run: |
          cd backend
          # カレントディレクトリをbackendに設定してからカバレッジレポートを生成
          pytest quiz/tests/test_integration.py quiz/tests/test_api_client_mock.py --cov=quiz --cov-report=xml
      
      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/coverage.xml

  frontend_integration_tests:
    name: Frontend Integration Tests
    runs-on: ubuntu-latest
    needs: backend_integration_tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          # カバレッジレポート生成に必要な依存関係を明示的にインストール
          npm install -D @vitest/coverage-v8
      
      - name: Run frontend integration tests
        run: |
          # テスト実行前にモックファイルディレクトリを作成
          mkdir -p src/test/mocks
          
          # API clientをモックするファイルを作成
          mkdir -p src/test/__mocks__
          echo "import { vi } from 'vitest';

          const api = {
            get: vi.fn(() => Promise.resolve({ data: {} })),
            post: vi.fn(() => Promise.resolve({ data: {} })),
            put: vi.fn(() => Promise.resolve({ data: {} })),
            delete: vi.fn(() => Promise.resolve({ data: {} })),
            patch: vi.fn(() => Promise.resolve({ data: {} }))
          };
          
          export default api;" > src/test/__mocks__/api.js
          
          # テスト実行
          npm test -- src/components/tests/QuizApiIntegration.test.tsx
      
      - name: Generate Frontend Coverage Report
        run: |
          # 確認のためカバレッジレポート生成前に依存関係の確認
          echo "列挙された依存関係:"
          npm list @vitest/coverage-v8 || true

          # カバレッジレポート生成
          npm test -- src/components/tests/QuizApiIntegration.test.tsx --coverage --coverage.reporter=lcov
      
      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: coverage/

  full_integration_test:
    name: Full Integration Test
    runs-on: ubuntu-latest
    needs: [backend_integration_tests, frontend_integration_tests]
    
    env:
      DJANGO_SETTINGS_MODULE: techskillsquiz.settings.test
      DATABASE_NAME: test_db
      DATABASE_USER: test_user
      DATABASE_PASSWORD: test_password
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      SUPABASE_URL: "http://localhost:54321"
      SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ env.DATABASE_NAME }}
          POSTGRES_USER: ${{ env.DATABASE_USER }}
          POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          cd backend
          poetry config virtualenvs.create false
          poetry install --with dev
          # 確実にpytestとカバレッジプラグインをインストール
          pip install pytest pytest-cov pytest-django
      
      - name: Install frontend dependencies
        run: |
          npm ci
          # カバレッジレポート生成に必要な依存関係を明示的にインストール
          npm install -D @vitest/coverage-v8
      
      - name: Start backend server
        run: |
          cd backend
          python manage.py migrate
          python manage.py runserver 8000 &
          sleep 5
      
      - name: Test full integration
        run: |
          # バックエンドのAPIへの接続テスト
          curl -f http://localhost:8000/api/v1/quiz/categories/ || exit 1
          
          # フロントエンドからバックエンドAPIへの接続テスト
          export VITE_API_BASE_URL=http://localhost:8000
          npm run build
          npm run preview -- --port 3000 &
          sleep 5
          
          # 統合アプリケーションの動作確認
          curl -f http://localhost:3000 || exit 1
      
      - name: Notify success
        if: success()
        run: echo "統合テストが正常に完了しました"
      
      - name: Notify failure
        if: failure()
        run: echo "統合テストに失敗しました" 